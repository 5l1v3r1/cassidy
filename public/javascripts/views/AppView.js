// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = $('#new_secret form');

    AppView.prototype.events = {
      'change #master': 'toggleMaster',
      'keyup input.required': 'render'
    };

    AppView.prototype.initialize = function() {
      app.Config.bind('change', this.render, this);
      this.loadMaster();
      return $('#secret').on('focus touchstart', function() {
        this.selectionStart = 0;
        this.selectionEnd = this.value.length;
        app.Domains.save({
          url: $('#domain').val(),
          config: app.ConfigView.model.toJSON()
        });
        if (app.mobile) {
          return $('small.hint').fadeIn();
        }
      }).on('blur', function() {
        if (app.mobile) {
          return $('small.hint').fadeOut();
        }
      });
    };

    AppView.prototype.loadMaster = function() {
      return $('#master').val(app.Config.get('master'));
    };

    AppView.prototype.focusInput = function() {
      return $('input.required:visible', this.$el).each(function() {
        if (!this.value.length) {
          $(this).focus();
          return false;
        }
      });
    };

    AppView.prototype.toggleMaster = function() {
      if (app.Config.get('save_all')) {
        return app.ConfigView.saveConfig();
      }
    };

    AppView.prototype.newSecret = function(master, domain, config) {
      return new app.Secret({
        master: master,
        domain: domain,
        config: config
      });
    };

    AppView.prototype.render = function(domain_id) {
      var config, domain, secret;
      if (typeof domain_id === 'string') {
        domain = app.Domains.get(domain_id);
        config = domain.get('config') || app.ConfigView.model.toJSON();
        $('#domain').val(domain.get('url'));
        secret = this.newSecret(config.master, domain.get('url'), config);
      } else {
        config = app.Config.toJSON();
        secret = this.newSecret($('#master').val(), $('#domain').val(), config);
      }
      if (secret) {
        $('#secret').val(secret.get('secret'));
        if (app.mobile) {
          if ($('#secret').val().length) {
            return $('#secret').show().attr('readonly', false);
          } else {
            return $('#secret').hide().attr('readonly', true);
          }
        }
      }
    };

    return AppView;

  })(Backbone.View);

}).call(this);
