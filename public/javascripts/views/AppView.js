// Generated by CoffeeScript 1.3.3
(function() {
  var AppView;

  AppView = Backbone.View.extend({
    el: $('#new_secret form'),
    events: {
      'change #master': 'toggle_master',
      'keyup input.required': 'render'
    },
    initialize: function() {
      var $panel, self, _ref;
      self = this;
      $panel = $('#swipe .panel');
      window.Swipe = new Swipe(document.getElementById('swipe'), {
        startSlide: 1,
        callback: function() {
          return $('#swipe').trigger('swipe.animated');
        }
      });
      App.ConfigView.model.bind('change', this.render, this);
      this.load_master();
      this.focus();
      this.render_domains();
      App.is_mobile = (_ref = navigator.userAgent.match(/mobile/i) !== null) != null ? _ref : {
        "true": false
      };
      $('body').on('swipe.animated', '#swipe', function() {
        var $active;
        $active = $panel.eq(Swipe.getPos());
        if ($active[0] === self.el.parent()[0]) {
          return self.focus();
        }
      });
      return $('#secret').bind('focus touchstart', function() {
        this.selectionStart = 0;
        this.selectionEnd = this.value.length;
        if (self.mobile_user) {
          return $('small.hint').fadeIn();
        }
      }).blur(function() {
        if (self.mobile_user) {
          return $('small.hint').fadeOut();
        }
      });
    },
    load_master: function() {
      return $('#master').val(App.ConfigView.model.get('master'));
    },
    focus: function() {
      return $('input.required:visible', this.el).each(function(index) {
        if (this.value.length === 0) {
          $(this).focus();
          return false;
        }
      });
    },
    toggle_master: function() {
      if (App.ConfigView.model.get('save_master')) {
        return App.ConfigView.saveMaster();
      }
    },
    render: function() {
      var config, hatchpass, self;
      self = this;
      config = App.ConfigView.model.toJSON();
      hatchpass = new App.Secret({
        master: $('#master').val(),
        domain: $('#domain').val(),
        config: config
      });
      if (hatchpass) {
        $('#secret').val(hatchpass.get('secret'));
        if (App.is_mobile) {
          if ($('#secret').val().length > 0) {
            $('#secret').show().attr('readonly', false);
          } else {
            $('#secret').hide().attr('readonly', true);
          }
        }
        return $('#secret').off('focus').focus(function(e) {
          return self.save_domain($('#domain').val());
        });
      }
    },
    save_domain: function(domain) {
      var recent_domains, total;
      recent_domains = [];
      if (localStorage.recent_domains) {
        recent_domains = JSON.parse(localStorage.recent_domains);
      }
      total = recent_domains.length;
      if (total >= 10) {
        recent_domains.splice(0, 1);
      }
      recent_domains.push(domain);
      localStorage.recent_domains = JSON.stringify(recent_domains.unique());
      return this.render_domains();
    },
    render_domains: function() {
      var $recent_domains, html, i, recent_domains, total, _results;
      recent_domains = [];
      if (localStorage.recent_domains) {
        recent_domains = JSON.parse(localStorage.recent_domains);
      }
      total = recent_domains.length;
      $recent_domains = $('#recent_domains ul');
      $recent_domains.empty();
      if (total > 0) {
        i = 0;
        _results = [];
        while (i < total) {
          html = "<li>                   <a href='#" + recent_domains[i] + "' class='domain'>                    " + recent_domains[i] + "                  </a>                   <a href='#remove' class='remove' data-id='" + i + "'>&times;</a>                </li>";
          $recent_domains.append(html);
          _results.push(i++);
        }
        return _results;
      } else {
        html = "<li class='no-results'>You have no recent domains</li>";
        return $recent_domains.append(html);
      }
    }
  });

  App.AppView = new AppView;

}).call(this);
