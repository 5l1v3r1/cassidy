// Generated by CoffeeScript 1.3.3
(function() {
  var ConfigView,
    __hasProp = {}.hasOwnProperty;

  ConfigView = Backbone.View.extend({
    el: $('#settings'),
    tagName: "input",
    events: {
      'change input': 'saveConfig'
    },
    initialize: function() {
      var self;
      this.model = new App.Config;
      self = this;
      this.model.fetch({
        success: function(model, response) {
          self.model.unset('0');
          self.model.set(response[0]);
          return self.render();
        }
      });
      return this["import"]();
    },
    "import": function() {
      var import_key, import_master, import_settings;
      if (localStorage.hp_settings) {
        import_key = localStorage.hp_key;
        import_settings = JSON.parse(localStorage.hp_settings);
        import_master = localStorage.hp_master;
        import_settings.save_settings = import_settings.remember;
        delete import_settings.remember;
        delete import_settings.algorithm;
        this.model.set({
          master: import_master,
          key: import_key
        });
        this.model.set(import_settings);
        this.model.save();
        localStorage.removeItem('hp_key');
        localStorage.removeItem('hp_settings');
        localStorage.removeItem('hp_master');
        console.log("Import successful");
        return this.render();
      }
    },
    render: function() {
      var config, index, value, _results;
      config = this.model.attributes;
      _results = [];
      for (index in config) {
        if (!__hasProp.call(config, index)) continue;
        value = config[index];
        switch ($("#" + index).attr('type')) {
          case "checkbox":
            $("#" + index).attr('checked', config[index]);
            break;
          default:
            $("#" + index).val(config[index]);
            break;
        }
      }
      return _results;
    },
    saveConfig: function() {
      var config;
      config = $('form', this.el).serializeObject();
      config.key = config.key.toLowerCase();
      this.model.set(config);
      if (config.save_settings) {
        this.model.save(config);
      } else {
        this.model.destroy();
      }
      return this.saveMaster();
    },
    saveMaster: function() {
      var master;
      master = $('#master').val();
      if (this.model.get('save_master')) {
        if (master.length > 0 && localStorage.master !== master) {
          return this.model.save({
            master: master
          });
        }
      } else {
        this.model.unset('master');
        return this.model.save();
      }
    }
  });

  App.ConfigView = new ConfigView;

}).call(this);
