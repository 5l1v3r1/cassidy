// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.ConfigView = (function(_super) {

    __extends(ConfigView, _super);

    function ConfigView() {
      return ConfigView.__super__.constructor.apply(this, arguments);
    }

    ConfigView.prototype.el = $('#settings');

    ConfigView.prototype.tagName = "input";

    ConfigView.prototype.events = {
      'change input': 'saveConfig'
    };

    ConfigView.prototype.initialize = function() {
      return this.model.fetch();
    };

    ConfigView.prototype["import"] = function() {
      var import_key, import_master, import_settings;
      if (localStorage.hp_settings) {
        import_key = localStorage.hp_key;
        import_settings = JSON.parse(localStorage.hp_settings);
        import_master = localStorage.hp_master;
        import_settings.save_settings = import_settings.remember;
        delete import_settings.remember;
        delete import_settings.algorithm;
        this.model.set({
          master: import_master,
          key: import_key
        });
        this.model.set(import_settings);
        this.model.save();
        localStorage.removeItem('hp_key');
        localStorage.removeItem('hp_settings');
        localStorage.removeItem('hp_master');
        console.log("Import successful");
        return this.render();
      }
    };

    ConfigView.prototype.render = function() {
      var config, index, value, _results;
      config = this.model.attributes;
      _results = [];
      for (index in config) {
        if (!__hasProp.call(config, index)) continue;
        value = config[index];
        switch ($("#" + index).attr('type')) {
          case "checkbox":
            $("#" + index).attr('checked', config[index]);
            break;
          default:
            $("#" + index).val(config[index]);
            break;
        }
      }
      return _results;
    };

    ConfigView.prototype.saveConfig = function() {
      var config, master;
      config = $('form', this.el).serializeObject();
      master = $('#master').val();
      if (master.length > 0) {
        config.master = $('#master').val();
      }
      this.model.set(config);
      if (config.save_all) {
        return this.model.save(config);
      } else {
        return this.model.destroy();
      }
    };

    return ConfigView;

  })(Backbone.View);

}).call(this);
